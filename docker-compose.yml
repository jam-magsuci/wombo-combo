services:
  postgres:
    image: postgres:16
    container_name: n8n_db
    restart: always
    env_file:
      - .env
    volumes:
      - n8n_postgres_data:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - localnet

  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: n8n_service
    restart: always
    env_file:
      - .env
    ports:
      - 5678:5678
    links:
      - postgres
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - localnet


  yourls:
    image: yourls:latest
    container_name: yourls_service
    restart: unless-stopped
    ports:
      - 8080:80
    expose:
      - 80
    env_file:
      - .env
    volumes:
      - ./security.conf:/etc/apache2/conf-enabled/security.conf:ro
      - yourls_data:/var/www/html/
    networks:
     - localnet
    depends_on:
      mysql:
        condition: service_healthy


  mysql:
    image: mysql:latest
    container_name: yourls_db
    restart: unless-stopped
    expose:
      - 3306
    env_file:
      - .env
    volumes:
      - yourls_db:/var/lib/mysql
    networks:
     - localnet
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      interval: 10s
      timeout: 5s
      retries: 5


     

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: always
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    networks:
      - localnet

volumes:
  n8n_postgres_data:
  n8n_data:
  yourls_data:
  yourls_db:

networks:
  localnet:
    external: true